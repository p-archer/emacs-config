#+TITLE: Emacs config
#+AUTHOR: Carnifex
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* UI setup
  Config for general usage.
** Filetype associations
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.pcss\\'" . css-mode))
     (add-to-list 'auto-mode-alist '("\\.log\\'" . json-mode))
   #+END_SRC
** Folding
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'origami-parser-alist '(scss-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(css-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(react-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(js2-jsx-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(rjsx-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(typescript-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(typescript-tsx-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(tide-mode . origami-c-style-parser))
     (add-to-list 'origami-parser-alist '(json-mode . origami-c-style-parser))
     #+END_SRC
** Highlight active line
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'hl-line nil :background "#4e342e")
   #+END_SRC
** Indentation
   Use tabs, force tab-width 4.
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode t)
     (setq-default tab-width 4)

     (add-to-list 'org-mode-hook
         (lambda ()
           (setq-local indent-tabs-mode nil)))
     (setq highlight-indent-guides-highlighter-function 'custom/highlight-indent-guide)
   #+END_SRC
** Whitespaces
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'popup (set-face-attribute 'popup-tip-face nil :background "#544311" :foreground "#ff8700"))
     (setq-default line-spacing 3)

     ;; make sure whitespaces are shown in the following modes
     (setq highlight-indent-guides-method 'character)
     (setq highlight-indent-guides-responsive 'top)
     (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
     (spacemacs/set-leader-keys
       "tw" 'highlight-indent-guides-mode)

     (add-hook 'js2-mode-hook (lambda() (setq truncate-lines 1)))
     (add-hook 'web-mode-hook (lambda () (setq truncate-lines 1)))
     (add-hook 'less-mode-hook (lambda () (setq truncate-lines 1)))
     (add-hook 'css-mode-hook (lambda () (setq truncate-lines 1)))
     (add-hook 'js-jsx-mode-hook (lambda () (setq truncate-lines 1)))
     (add-hook 'coffee-mode-hook (lambda () (setq truncate-lines 1)))

     (spacemacs/toggle-vi-tilde-fringe-off)
   #+END_SRC
** Window settings
   Transparency for the window.
   #+BEGIN_SRC emacs-lisp
   (set-frame-parameter (selected-frame) 'alpha '(100 . 95))
   (fringe-mode '(24 . 12))
   #+END_SRC
* Key bindings
** Osx key settings
  #+BEGIN_SRC emacs-lisp
  (setq ns-command-modifier 'meta)
  (setq ns-alternate-modifier 'super)
  (setq ns-function-modifier 'control)
  #+END_SRC
** General key bindings
  #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map "L" 'evil-end-of-line)
    (define-key evil-normal-state-map "H" 'evil-beginning-of-line)
    (define-key evil-normal-state-map (kbd "C-j") 'evil-scroll-line-down)
    (define-key evil-normal-state-map (kbd "C-k") 'evil-scroll-line-up)
    (define-key evil-normal-state-map (kbd "C-S-j") (lambda () (interactive) (evil-scroll-line-down 5)))
    (define-key evil-normal-state-map (kbd "C-S-k") (lambda () (interactive) (evil-scroll-line-up 5)))
    (define-key evil-normal-state-map (kbd "C-h") 'evil-prev-buffer)
    (define-key evil-normal-state-map (kbd "C-l") 'evil-next-buffer)
    (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
    (define-key evil-normal-state-map (kbd "<down>") 'flycheck-next-error)
    (define-key evil-normal-state-map (kbd "<up>") 'flycheck-previous-error)
    ;; (define-key evil-normal-state-map (kbd "s-j") 'move-text-line-down)
    ;; (define-key evil-normal-state-map (kbd "s-k") 'move-text-line-up)
    (define-key evil-normal-state-map (kbd "M-j") 'move-text-line-down)
    (define-key evil-normal-state-map (kbd "M-k") 'move-text-line-up)
    (define-key evil-normal-state-map (kbd "<backtab>") 'origami-show-only-node)
    (define-key evil-normal-state-map (kbd "[[") 'custom/goto-direct-parent-indent)
    (define-key evil-normal-state-map (kbd "]]") 'custom/goto-direct-parent-outdent)

    (define-key evil-insert-state-map (kbd "s-;") 'yas-expand)
    (define-key evil-insert-state-map (kbd "M-k") (lambda () (interactive) (evil-previous-line) (evil-end-of-line)))
    (define-key evil-insert-state-map (kbd "M-j") (lambda () (interactive) (evil-next-line) (evil-first-non-blank)))
    (define-key evil-insert-state-map (kbd "C-j") 'evil-scroll-line-down)
    (define-key evil-insert-state-map (kbd "C-k") 'evil-scroll-line-up)
    (define-key evil-insert-state-map (kbd "C-S-j") (lambda () (interactive) (evil-scroll-line-down 5)))
    (define-key evil-insert-state-map (kbd "C-S-k") (lambda () (interactive) (evil-scroll-line-up 5)))
    (define-key evil-insert-state-map (kbd "C-h") 'evil-prev-buffer)
    (define-key evil-insert-state-map (kbd "C-l") 'evil-next-buffer)

    (define-key evil-visual-state-map "L" 'evil-end-of-line)
    (define-key evil-visual-state-map "H" 'evil-beginning-of-line)

    (define-key evil-normal-state-map (kbd "C-p") 'custom/paste-after-from-0)
    (define-key evil-normal-state-map (kbd "C-P") 'custom/paste-before-from-0)
    (define-key evil-visual-state-map (kbd "C-p") 'custom/paste-after-from-0)
    (define-key evil-visual-state-map (kbd "C-P") 'custom/paste-before-from-0)

    (define-key evil-normal-state-map (kbd "M-p") 'custom/paste-after-and-pop-kill-ring)
    (define-key evil-normal-state-map (kbd "M-P") 'custom/paste-before-and-pop-kill-ring)
    (define-key evil-visual-state-map (kbd "M-p") 'custom/paste-after-and-pop-kill-ring)
    (define-key evil-visual-state-map (kbd "M-P") 'custom/paste-before-and-pop-kill-ring)

    (require 'general)
    (general-evil-setup)
    (general-nmap "m"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        "t" 'evil-window-top
        "b" 'evil-window-bottom
        "m" '
        evil-window-middle))

    ;; (spacemacs/set-leader-keys
    ;;   "da" 'delete-minibuffer-contents
    ;;   "ca" 'custom/copy-buffer-contents)

    (evil-define-key 'normal coffee-mode-map (kbd "<tab>") 'origami-forward-toggle-node)
    (evil-define-key 'normal js2-mode-map (kbd "<tab>") 'origami-forward-toggle-node)
    (evil-define-key 'normal scss-mode-map (kbd "<tab>") 'origami-forward-toggle-node)
    (evil-define-key 'normal css-mode-map (kbd "<tab>") 'origami-forward-toggle-node)
  #+END_SRC
** Key chord escapes
  #+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-mode t)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  ;; (setq-default evil-escape-key-sequence "jj")
  #+END_SRC
** Org file shortcuts
  #+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys
    "feD" 'open-custom-config
    "fei" 'open-ideas-org-file
    "aop" 'custom/org-projectile-capture)
  #+END_SRC
** Spacemacs overrides
   #+BEGIN_SRC emacs-lisp
   (spacemacs/set-leader-keys
     "bd" 'custom/kill-buffer)
   #+END_SRC
* Packages
  Configuration for used packages.
  #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives
                '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  #+END_SRC
** autosave
  #+BEGIN_SRC emacs-lisp
    ;; (add-hook 'focus-out-hook '(lambda ()
    ;;                             (if (not (string-match-p "\*" (buffer-name)))
    ;;                                 (save-buffer))))
  #+END_SRC
** bookmarks
   #+BEGIN_SRC emacs-lisp
     (require 'bm)
     (define-key evil-normal-state-map (kbd "S-m") 'bm-toggle)
     (define-key evil-normal-state-map (kbd "M-m") 'bm-toggle)
     (define-key evil-normal-state-map (kbd "<left>") 'bm-previous)
     (define-key evil-normal-state-map (kbd "<right>") 'bm-next)

     (use-package bm
       :ensure t
       :demand t
       :config
       (setq bm-marker 'bm-marker-right)
       (setq bm-restore-repository-on-load t)
       (setq bm-repository-file "~/.emacs.d/bm-repo")
       (setq-default bm-buffer-persistence t)
       (add-hook 'after-init-hook 'bm-repository-load)
       (add-hook 'kill-buffer-hook #'bm-buffer-save)
       (add-hook 'kill-emacs-hook (lambda nil
                                    (bm-buffer-save-all)
                                    (bm-repository-save)))
       (add-hook 'after-save-hook #'bm-buffer-save)
       (add-hook 'find-file-hooks #'bm-buffer-restore)

       (set-face-attribute 'bm-persistent-face nil :background "#2e7d32")
       ;; darker (set-face-attribute 'bm-persistent-face nil :background "#1b5e20")
       (set-face-attribute 'bm-fringe-persistent-face nil :background "#2e7d32"))

     (spacemacs/set-leader-keys
       "bl" 'bm-show-all)

   #+END_SRC
** dimmer
   #+BEGIN_SRC emacs-lisp
     (use-package dimmer
       :custom
       (dimmer-fraction 0.2)
       (dimmer-exclusion-regexp-list
        '(".*Minibuf.*"
          ".*Neotree.*"
          ".*Messages.*"
          ".*Warnings.*"
          ".*HELM.*"
          ".*Helm.*"))
       :config
       (dimmer-mode t))
   #+END_SRC
** doom-modeline
   #+BEGIN_SRC emacs-lisp
     (setq doom-modeline-buffer-file-name-style 'file-name)

     (setq doom-modeline-bar-width 2)

     (set-face-attribute 'doom-modeline-evil-normal-state nil :background "#f54c00" :foreground "#ffffff")
     (set-face-attribute 'doom-modeline-evil-visual-state nil :background "#2196fa" :foreground "#ffffff")
     (set-face-attribute 'doom-modeline-evil-insert-state nil :background "#4caf50" :foreground "#ffffff")

     (doom-modeline-def-modeline 'minimal-modeline
       '(bar window-number " " buffer-info-simple)
       '(remote-host " " major-mode))
     (doom-modeline-def-modeline 'optimal-modeline
       '(bar modals " " window-number " " matches buffer-info-simple " " buffer-position " " checker)
       '(remote-host " " vcs " " buffer-encoding " " major-mode))
     (doom-modeline-set-modeline 'optimal-modeline t)
   #+END_SRC
** engine mode
   Package to search in browser.
   #+BEGIN_SRC emacs-lisp
     (require 'engine-mode)
     (engine-mode 1)
     (defengine duckduckgo "https://duckduckgo.com/?q=%s" :keybinding "d")
     (defengine google "https://google.com/search?q=%s" :keybinding "g")
     (defengine wiki "https://en.wikipedia.org/wiki/Search?search=%s" :keybinding "w")
     (defengine fontawesome "https://fontawesome.com/icons?d=gallery&m=free&q=%s" :keybinding "f")
     (engine/set-keymap-prefix (kbd "M-/"))
     (engine/set-keymap-prefix (kbd "S-/"))
   #+END_SRC
** eshell
   #+BEGIN_SRC emacs-lisp
     (setq eshell-prompt-regexp "^[^ƒ]*ƒ ")

     (defun current-dir-git-branch-string (pwd)
       "Returns git branch name for current directory, or empty string if PWD is not in a git repo"
       (interactive)
       (when (and (eshell-search-path "git")
                  (locate-dominating-file pwd ".git"))
         (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
           (propertize (concat " ~~> "
                               (if (> (length git-output) 0)
                                   (substring git-output 0 -1)
                                 "(no brancho)")) 'face `(:foreground "green")))))

     (defun pwd-repl-home (pwd)
       (interactive)
       (let* ((home (expand-file-name (getenv "HOME")))
              (home-len (length home)))
         (concat
          (if (and
               (>= (length pwd) home-len)
               (equal home (substring pwd 0 home-len)))
              (concat "~" (substring pwd home-len))
            pwd))))

     (setq eshell-prompt-function
           (lambda ()
             (concat
              (propertize "\n=>> " 'face `(:foreground "#ffcc66"))
              ((lambda (p-lst)
                 (concat
                  (propertize
                   (concat
                    (mapconcat (lambda (elm) elm)
                               (butlast p-lst)
                               "/")
                    "/") 'face `(:foreground "#f09000"))
                  (propertize
                   (concat
                    (mapconcat (lambda (str) str) (last p-lst) "")
                    "/") 'face `(:foreground "#ff9900"))))
               (split-string (pwd-repl-home (eshell/pwd)) "/"))
              ;; (or (current-dir-git-branch-string (eshell/pwd)))
              "\n"
              (propertize (eshell/whoami) 'face `(:foreground "#0088ff"))
              (propertize " " 'face 'default)
              (propertize "ƒ" 'face `(:foreground "#f03300"))
              (propertize " " 'face 'default))))

     ;; fix for slowness
     (defun custom/remove-eshell-pcomplete ()
       (remove-hook 'completion-at-point-functions #'pcomplete-completions-at-point t))

      (defun custom/term-close (&rest args)
       (when (null (get-buffer-process (current-buffer)))
         (kill-buffer (current-buffer))
         (delete-window)))

     (advice-add 'term-handle-exit :after #'custom/term-close)
     (add-hook 'eshell-mode-hook #'custom/remove-eshell-pcomplete)
   #+END_SRC
** eslint
   #+BEGIN_SRC emacs-lisp
     (setq flycheck-eslintrc "~/.eslintrc")
   #+END_SRC
** eww
   #+BEGIN_SRC emacs-lisp
   (setq shr-inhibit-images t)
   #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
     (add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode)
     ;; (add-to-list 'flycheck-eslint-rules-directories "~/")
   #+END_SRC
** flyspell auto-correct
   #+BEGIN_SRC emacs-lisp
   (spacemacs/set-leader-keys
   "SC" 'custom/ispell-fix-then-abbrev)

   (setq save-abbrevs t)
   (setq-default abbrev-mode t)
   #+END_SRC
** fira code font
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (set-frame-font "Fira Code"))
     (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                    (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                    (36 . ".\\(?:>\\)")
                    (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                    (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                    (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                    (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                    (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                    ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                    (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                    (48 . ".\\(?:x[a-zA-Z]\\)")
                    (58 . ".\\(?:::\\|[:=]\\)")
                    (59 . ".\\(?:;;\\|;\\)")
                    (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                    (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                    (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                    (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                    (91 . ".\\(?:]\\)")
                    (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                    (94 . ".\\(?:=\\)")
                    (119 . ".\\(?:ww\\)")
                    (123 . ".\\(?:-\\)")
                    (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                    (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                    )
                  ))
       (dolist (char-regexp alist)
         (set-char-table-range composition-function-table (car char-regexp)
                               `([,(cdr char-regexp) 0 font-shape-gstring]))))

     (add-hook 'helm-major-mode-hook
               (lambda ()
                 (setq auto-composition-mode nil)))
   #+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (setq helm-boring-buffer-regexp-list '("\\*" "\\` " "\\`\\*helm" "\\`\\*Echo Area" "\\`\\*Minibuf" "\\`\\magit"))
#+END_SRC
** ispell dictionary
   #+BEGIN_SRC emacs-lisp
   ;; (setq ispell-personal-dictionary "~/emacs-config/ispell.eng.pws")
   #+END_SRC
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (setq js2-mode-show-strict-warnings nil)
     (setq js2-mode-show-parse-errors nil)

     (spacemacs/set-leader-keys-for-major-mode 'js2-mode
       "gg" 'js2-jump-to-definition
       "gG" 'custom/js2-jump-to-definition-other-window)
   #+END_SRC
** linum
   #+BEGIN_SRC emacs-lisp
   (setq linum-relative-backend 'display-line-numbers-mode)
   #+END_SRC
** markdown
   #+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(markdown-command "github-markdown-render"))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
   ;; (setq-default git-magit-status-fullscreen 1)
   ;; (setq git-magit-status-fullscreen 1)

   ;; TODO magit-bury-buffer-function to be changed
   ;; magit-mode-get-buffers is a list of current repo buffers
   #+END_SRC
** neotree
   #+BEGIN_SRC emacs-lisp
     (require 'all-the-icons)
     (add-to-list 'all-the-icons-icon-alist '("\\.tsx$" all-the-icons-fileicon "typescript" :height 1.0 :v-adjust -0.1 :face all-the-icons-orange))
     (add-to-list 'all-the-icons-icon-alist '("\\.pcss$" all-the-icons-fileicon "postcss" :height 1.0 :v-adjust -0.1 :face all-the-icons-dred))

     (setq neo-theme 'icons)
     (setq neo-window-position 'right)
     (global-set-key [f2] 'neotree-find-project-root)

     (require 'neotree)
     (set-face-attribute 'neo-dir-link-face nil :height 140)
     (set-face-attribute 'neo-file-link-face nil :height 140)
     (set-face-attribute 'neo-banner-face nil :height 140)
     (set-face-attribute 'neo-button-face nil :height 140)
   #+END_SRC
** org-agenda
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-dim-blocked-tasks nil)
     (setq org-agenda-use-tag-inheritance nil)
     (setq org-agenda-window-setup 'current-window)

     ;; remote org files
     (setq tramp-method "ssh")
     (setq org-tramp-user "carnifex")
     (setq org-remote-host "54.190.201.185")
     (setq org-remote-address (concat "/" tramp-method ":" org-tramp-user "@" org-remote-host ":"))

     (setq org-projects-file (concat org-remote-address "/home/carnifex/org/projects.org"))
     (setq org-projects-inbox-file (concat org-remote-address "/home/carnifex/org/projects-inbox.org"))
     (setq org-ideas-file (concat org-remote-address "/home/carnifex/org/ideas.org"))

     ;; files to use in agenda view
     (if (file-exists-p "~/org/work.org")
         (progn
           (setq org-work-file "~/org/work.org")
           (setq org-work-inbox-file "~/org/work-inbox.org"))
       (progn
         (setq org-work-file nil)
         (setq org-work-inbox-file nil)))

     (if org-work-file
         (setq org-agenda-files
               (list org-projects-inbox-file org-projects-file org-work-file org-work-inbox-file))
       (setq org-agenda-files
             (list org-projects-inbox-file org-projects-file)))

     (defun open-custom-config ()
       (interactive)
       (find-file "~/emacs-config/emacs.config.org"))
     (defun open-ideas-org-file ()
       (interactive)
       (find-file org-ideas-file))

     ;; agenda views
     (setq org-agenda-custom-commands
           '(("d" "default"
              ((agenda ""
                       ((org-agenda-overriding-header "Week's schedule")
                        (org-agenda-show-log t)
                        (org-agenda-log-mode-items '(state))
                        (org-agenda-use-time-grid nil)
                        (org-agenda-skip-scheduled-if-done t)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp "STYLE:\s*habit"))
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE" "CANCELLED")))
                        (org-agenda-sorting-strategy
                         '(todo-state-down priority-down))
                        (org-habit-show-habits nil)))
               (todo "IN-PROGRESS"
                     ((org-agenda-overriding-header "Active")))
               (todo '("TODO" "BLOCKED" "POSTPONED")
                     ((org-agenda-overriding-header "Pending")
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled t)))
               (tags-todo "SCHEDULED<\"<-1d>\"|DEADLINE<\"<-1d>\""
                          ((org-agenda-overriding-header "Overdue")))
               (agenda ""
                       ((org-agenda-overriding-header "Habits")
                        (org-agenda-use-time-grid nil)
                        (org-agenda-span 'day)
                        (org-agenda-ndays 1)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+0d")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "STYLE:\s*habit"))
                        (org-habit-show-habits t)))))
             ("w" "work"
              ((agenda ""
                       ((org-agenda-overriding-header "Work todos")
                        (org-agenda-files '("~/org/work.org" "~/org/work-inbox.org"))
                        (org-agenda-show-log t)
                        (org-agenda-log-mode-items '(state))
                        (org-agenda-use-time-grid nil)))
               (todo '("TODO" "BLOCKED" "POSTPONED")
                     ((org-agenda-overriding-header "Pending")
                      (org-agenda-files '("~/org/work.org" "~/org/work-inbox.org"))
                      (org-agenda-todo-ignore-scheduled t)))
               (tags-todo "@oncall"
                          ((org-agenda-overriding-header "On-call")
                           (org-agenda-files '("~/org/work.org" "~/org/work-inbox.org"))))
               (todo "IN-PROGRESS"
                     ((org-agenda-overriding-header "Active")
                      (org-agenda-files '("~/org/work.org" "~/org/work-inbox.org"))))))))
   #+END_SRC
** org-capture
   #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(("t" "todo" entry (file+headline org-projects-inbox-file "inbox")
             "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :source:   emacs\n  :END:\n" :prepend t :kill-buffer t)
            ("w" "work todo" entry (file+headline org-work-inbox-file "inbox")
             "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n%^{effort}p" :prepend t :kill-buffer t)
            ("l" "linked todo" entry (file+headline org-work-inbox-file "inbox")
             "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :link: %a\n  :END:\n%^{effort}p" :prepend t :kill-buffer t)
            ("i" "idea/someday" entry (file+headline org-ideas-file)
             "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t)))
   #+END_SRC
** org-mode
   Basic general org settings.
   #+BEGIN_SRC emacs-lisp
     ;; general stuff
     (setq projectile-mode-line "projectile")
     (setq org-modules '(org-gnus org-habit org-id org-info org-w3m))

     (setq org-enforce-todo-dependencies t)
     (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js")
     (setq org-reverse-note-order t)
     (setq org-refile-use-outline-path t)
     (setq org-src-tab-acts-natively t)

     (setq org-refile-targets '((org-projects-file :maxlevel . 1)
                                (org-work-file :maxlevel . 1)))
     (setq org-outline-path-complete-in-steps nil)
     (setq org-feed-save-after-adding t)

     (setq org-todo-keywords
           '((sequence "TODO(t)" "IN-PROGRESS(i)" "POSTPONED(p)" "BLOCKED(b)" "|" "DONE(d)" "CANCELLED(c)")))
     (setq org-export-allow-bind-keywords t)

     (defun custom/org-customize-visuals ()
       (setq org-bullets-bullet-list '("▶"))
       (setq org-ellipsis " ▼")
       (setq org-tags-column -100)
       (setq org-todo-keyword-faces
             '(("TODO" :foreground "goldenrod")
               ("IN-PROGRESS" :foreground "white" :background "light sea green")
               ("BLOCKED" :foreground "white" :background "firebrick")
               ("DONE" :foreground "lime green")
               ("CANCELLED" :foreground "magenta")
               ("POSTPONED" :foreground "dodger blue")
               ("FEATURE" :foreground "deep sky blue")
               ("BUG" :foreground "orange red")
               ("DEV" :foreground "violet red")))
       (face-remap-add-relative 'default :family "Fira Code")
       (setq org-fontify-done-headline t)
       (set-face-attribute 'org-headline-done nil :strike-through t)
       (set-face-attribute 'org-tag nil :foreground "white")

       (set-face-attribute 'org-level-1 nil :weight 'semi-bold :height 1.0)
       (set-face-attribute 'org-level-2 nil :weight 'semi-bold :height 1.0)
       (set-face-attribute 'org-level-3 nil :weight 'semi-bold :height 1.0)
       (set-face-attribute 'org-level-4 nil :weight 'semi-bold :height 1.0)
       (set-face-attribute 'org-level-5 nil :weight 'semi-bold :height 1.0)

       (hl-todo-mode -1))

     (add-hook 'org-mode-hook 'custom/org-customize-visuals)
   #+END_SRC
** org-projectile
   Settings for org-projectile and capture templates
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** prettify symbols
   Replace keywords with symbols
   #+BEGIN_SRC emacs-lisp
     (defun register-prettify ()
         (progn
           (push '("function" . ?ƒ) prettify-symbols-alist)
           (push '("this" . ?@) prettify-symbols-alist)
           (push '("null" . ?∅) prettify-symbols-alist)
           (push '("undefined" . ?∄) prettify-symbols-alist)
           (push '("return" . ?⇐) prettify-symbols-alist)
           (push '("=>" . ?⇒) prettify-symbols-alist)
           (push '("prototype" . ?Ω) prettify-symbols-alist)))

     ;; (add-hook 'web-mode-hook 'register-prettify)
     ;; (global-prettify-symbols-mode 1)
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (add-hook 'find-file-hook
               (lambda ()
                 (when (file-remote-p default-directory)
                   (setq-local projectile-mode-line "projectile"))))
   #+END_SRC
** rainbow mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'css-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'less-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'scss-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'sass-mode-hook (lambda () (rainbow-mode t)))
   #+END_SRC
** recentf
   #+BEGIN_SRC emacs-lisp
   (setq recentf-max-saved-items 50)
   (setq persp-auto-save-opt 0)
   (setq recentf-auto-cleanup 'mode)
   #+END_SRC
** rsjx-mode
   #+BEGIN_SRC emacs-lisp
     (setq sgml-basic-offset 4)
   #+END_SRC
** spaceline
   #+BEGIN_SRC emacs-lisp
     (defun custom/customize-spaceline ()
       (use-package all-the-icons)
       (use-package spaceline-all-the-icons
         :after spaceline
         :config (spaceline-all-the-icons-theme))
       (setq spaceline-all-the-icons-separator-type 'slant)
       (setq spaceline-all-the-icons-clock-always-visible nil)

       (spaceline-toggle-all-the-icons-hud-off)
       (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)
       (spaceline-toggle-all-the-icons-bookmark-on)
       (spaceline-toggle-all-the-icons-time-on)
       (spaceline-toggle-all-the-icons-position-on)
       (setq spaceline-all-the-icons-icon-set-git-ahead 'commit)
       (setq spaceline-all-the-icons-icon-set-window-numbering 'solid)
       (setq spaceline-all-the-icons-slim-render t)

       (set-face-attribute 'spacemacs-normal-face nil :background "#f54c00" :foreground "#ffffff")
       (set-face-attribute 'spacemacs-visual-face nil :background "#2196fa" :foreground "#ffffff")
       (set-face-attribute 'spacemacs-insert-face nil :background "#4caf50" :foreground "#ffffff")

       (setq background-color (face-attribute 'default :background))
       (set-face-attribute 'powerline-active1 nil :background "#345")
       (set-face-attribute 'powerline-active2 nil :background background-color))

     ;; (custom/customize-spaceline)
   #+END_SRC
** tramp
   #+BEGIN_SRC emacs-lisp
     (setq tramp-debug-buffer t)
     (setq tramp-verbose 3)
     (setq tramp-copy-size-limit nil)
     (setq remote-file-name-inhibit-cache nil)
     (setq tramp-completion-reread-directory-timeout nil)

     (setq vc-ignore-dir-regexp
           (format "\\(%s\\)\\|\\(%s\\)"
                   vc-ignore-dir-regexp
                   tramp-file-name-regexp))
   #+END_SRC
** undo tree
   #+BEGIN_SRC emacs-lisp
   ;; (setq undo-tree-history-directory-alist '(("." . "~/emacs-config/.undo")))
   ;; (setq undo-tree-auto-save-history t)
   #+END_SRC
** web-mode
   #+BEGIN_SRC emacs-lisp
     (defun custom/alexa-apml-hook ()
       (setq web-mode-enable-auto-quoting nil)
       (if (string-equal (projectile-project-name) "AlexaApmlAuthoring-Frontend")
           (setq-local indent-tabs-mode nil)
         nil))

     (add-hook 'web-mode-hook 'custom/alexa-apml-hook)
     (add-hook 'typescript-mode-hook 'custom/alexa-apml-hook)
   #+END_SRC
* Functions
** fix spelling errors
   #+BEGIN_SRC emacs-lisp
   (defun custom/ispell-fix-then-abbrev (p)
    "Fix mispelled word with ispell-word, then create an abbrevation for that."
    (interactive "P")
    (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
      (call-interactively 'ispell-word)
      (setq aft (downcase (or (thing-at-point 'word) "")))
      (unless (string= aft bef)
        (message "\"%s\" now expands to \"%s\" %sally"
                 bef aft (if p "loc" "glob")
                 (define-abbrev
                   (if p local-abbrev-table global-abbrev-table)
                   bef aft)))))
   #+END_SRC
** open in new or existing window
   #+BEGIN_SRC emacs-lisp
  (defun custom/open-in-split (file)
       "get window count, if it's only one, open new window to the right, load file"
     (interactive)
     (if (= (length (window-list)) 1)
       (progn
         (split-window-right-and-focus)
         (find-file file))
       (progn 
        (other-window 1)
        (find-file file))))
   #+END_SRC
** copy buffer contents
   #+BEGIN_SRC emacs-lisp
   (defun custom/copy-buffer-contents ()
     (interactive)
     (progn
       (let ((origin (point)))
         (mark-whole-buffer)
         (kill-ring-save (region-beginning) (region-end))
         (goto-char origin))))
   #+END_SRC
** open new buffer for js2-jump-to-definition
   #+BEGIN_SRC emacs-lisp
   (defun custom/js2-jump-to-definition-other-window ()
     (interactive)
     (let ((pos (point))
       (switch-to-buffer-other-window (current-buffer))
       (goto-char pos)
       (js2-jump-to-definition))))
   #+END_SRC
** send habits to l3
   #+BEGIN_SRC emacs-lisp
     (defun custom/get-tags-json (tags)
       "create a json string for the list of tags"
       (setq list tags)
       (setq result "[")
       (while list
         (setq result (concat result " { \"name\": \"" (car list) "\" }"))
         (if (cdr list)
             (setq result (concat result ",")))
         (setq list (cdr list)))
       (concat result " ]"))

     (defun custom/send-to-l3 (title tags)
       (web-http-post
        (lambda (response status data)
          (message "response %S %S %S" response status data))
        :url "https://l3.peterarcher.ca/log"
        :mime-type "application/json"
        :data (concat "{ \"input\":\"" title "\", \"tags\": " (custom/get-tags-json tags) " }")))

     (defun custom/habit-done-hook ()
       "check if it's a habit and send it to l3"
       (if (and (member org-state org-done-keywords) (equal "habit" (org-entry-get nil "STYLE")))
           (custom/send-to-l3 (org-entry-get nil "ITEM") (append (split-string (org-entry-get nil "TAGS") ":" t) '("org-mode")))
         nil))

     ;; not working anymore since l3 requires login
     ;; (remove-hook 'org-after-todo-state-change-hook 'custom/habit-done-hook)
     ;; (add-hook 'org-after-todo-state-change-hook 'custom/habit-done-hook)
   #+END_SRC
** whitespace and indentation
  #+BEGIN_SRC emacs-lisp
  (defun custom/get-line ()
    "get text of current line"
    (buffer-substring-no-properties (line-beginning-position) (line-end-position)))

  (defun custom/get-indent (str)
    "get indent for str"
    (setq trimmed (string-trim-left str))
    (- (length str) (length trimmed)))

  (defun custom/get-current-indent ()
    "get indent level for current line"
    (setq text (custom/get-line))
    (custom/get-indent text))

  (defun custom/goto-direct-parent-indent ()
    (interactive)
    (setq indent-level (custom/get-current-indent))
    (while (and
            (/= (forward-line -1) -1)
            (or
            (>= (custom/get-current-indent) indent-level)
            (= (line-beginning-position) (line-end-position))))
      ()))

  (defun custom/goto-direct-parent-outdent ()
    (interactive)
    (setq indent-level (custom/get-current-indent))
    (while (and
            (/= (forward-line 1) 1)
            (or
            (>= (custom/get-current-indent) indent-level)
            (= (line-beginning-position) (line-end-position))))
      ()))
  #+END_SRC
** open per-project todo file
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org-projectile
       (defun org-projectile-get-project-todo-file (&optional project-path)
         (if (not project-path)
             (setq project-path (projectile-project-root))
           nil)
         (let ((path (file-name-as-directory project-path)))
           (let ((files
                  (list
                   (concat path "TODO.org")
                   (concat path (projectile-project-name) ".org")
                   (concat path "project.org"))))
             (let ((filtered (seq-filter 'file-exists-p files)))
               (if (> (length filtered) 0)
                   (car filtered)
                 (concat path "project.org")))))))
   #+END_SRC
** org-projectile-capture
   #+BEGIN_SRC emacs-lisp
   (defun custom/org-projectile-capture-templates-set-path ()
     (let ((org-file-path (org-projectile-get-project-todo-file)))
       `(("t" "todo" entry (file+headline ,org-file-path "inbox")
          "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t)
         ("f" "feature" entry (file+headline ,org-file-path "inbox")
          "* FEATURE %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t)
         ("d" "dev" entry (file+headline ,org-file-path "inbox")
          "* DEV %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t)
         ("b" "bug" entry (file+headline ,org-file-path "inbox")
          "* BUG %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t))))

   (defun custom/org-projectile-capture ()
     (interactive)
     (let* ((org-projectile-capture-templates (custom/org-projectile-capture-templates-set-path))
            (entry (org-mks org-projectile-capture-templates
                            "Select a capture template\n========================="
                            "Template key: "
                            '(("C" "Customize org-capture-templates")
                              ("q" "Abort"))))
            (orig-buf (current-buffer))
            (annotation (if (and (boundp 'org-capture-link-is-already-stored)
                                 org-capture-link-is-already-stored)
                            (plist-get org-store-link-plist :annotation)
                          (ignore-errors (org-store-link nil))))
            initial)
       (setq initial (or org-capture-initial
                         (and (org-region-active-p)
                              (buffer-substring (point) (mark)))))
       (org-capture-set-plist entry)
       (org-capture-get-template)
       (org-capture-put :original-buffer orig-buf
                        :original-file (or (buffer-file-name orig-buf)
                                           (and (featurep 'dired)
                                                (car (rassq orig-buf
                                                            dired-buffers))))
                        :original-file-nondirectory
                        (and (buffer-file-name orig-buf)
                             (file-name-nondirectory
                              (buffer-file-name orig-buf)))
                        :annotation annotation
                        :initial initial
                        :return-to-wconf (current-window-configuration)
                        :default-time
                        (or org-overriding-default-time
                            (org-current-time)))
       (org-capture-set-target-location)
       (org-capture-place-template
        (eq (car (org-capture-get :target)) 'function))
       ;; (org-capture-insert-template-here)
       ))
    #+END_SRC
** indentation-guide
   #+BEGIN_SRC emacs-lisp
   (defun custom/highlight-indent-guide (level responsive display)
     (if (< level 1)
   	  nil
   	(highlight-indent-guides--highlighter-default level responsive display)))
   #+END_SRC
** paste/delete with register 0
   #+BEGIN_SRC emacs-lisp
   (defun custom/paste-after-from-0 ()
     (interactive)
     (let ((evil-this-register ?0))
       (call-interactively 'evil-paste-after)))

   (defun custom/paste-before-from-0 ()
     (interactive)
     (let ((evil-this-register ?0))
       (call-interactively 'evil-paste-before)))

   (defun custom/cut-to-0 ()
     (interactive)
     (let ((evil-this-register ?0))
       (call-interactively 'evil-delete)))

   (defun custom/cut-line-to-0 ()
     (interactive)
     (let ((evil-this-register ?0))
       (call-interactively 'evil-delete-line)))
   #+END_SRC
** paste from kill ring and pop last entry
   #+BEGIN_SRC emacs-lisp
   (defun custom/paste-before-and-pop-kill-ring ()
     (interactive)
     (evil-set-register ?0 (car kill-ring))
     (let ((evil-this-register ?0))
   	   (call-interactively 'evil-paste-before)
   	   (setq kill-ring (cdr kill-ring))))
   
   (defun custom/paste-after-and-pop-kill-ring ()
     (interactive)
     (evil-set-register ?0 (car kill-ring))
     (let ((evil-this-register ?0))
   	   (call-interactively 'evil-paste-after)
   	   (setq kill-ring (cdr kill-ring))))
   #+END_SRC
** kill buffer and switch to previous buffer
   #+BEGIN_SRC emacs-lisp
     (defun custom/kill-buffer ()
       (interactive)
       (let ((current-buffer (buffer-name)))
             (call-interactively 'spacemacs/alternate-buffer)
             (kill-buffer current-buffer)))
   #+END_SRC
