#+TITLE: Emacs config
#+AUTHOR: Carnifex
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* UI setup
  Config for general usage.
** Indentation
   Use tabs, force tab-width 4.
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode t)
   (setq-default tab-width 4)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
   (setq python-shell-interpreter "python2")
   #+END_SRC
** Visual bookmarks
   #+BEGIN_SRC emacs-lisp
   (require 'bm)
   (define-key evil-normal-state-map (kbd "M-b") 'bm-toggle)
   (define-key evil-normal-state-map (kbd "M-m") 'bm-toggle)
   (define-key evil-normal-state-map (kbd "<left>") 'bm-previous)
   (define-key evil-normal-state-map (kbd "<right>") 'bm-next)
   #+END_SRC
** Whitespaces
   #+BEGIN_SRC emacs-lisp
   (setq whitespace-style '(face tabs tab-mark trailing))
   (setq whitespace-display-mappings
		 '((space-mark 32 [183])
		   (tab-mark 9 [124 9])))

   ;; make sure whitespaces are shown in the following modes
   (add-hook 'js2-mode-hook (lambda() (whitespace-mode t)))
   (add-hook 'web-mode-hook (lambda () (whitespace-mode t)))
   (add-hook 'less-mode-hook (lambda () (whitespace-mode t)))
   (add-hook 'css-mode-hook (lambda () (whitespace-mode t)))
   (add-hook 'js-jsx-mode-hook (lambda () (whitespace-mode t)))

   (add-hook 'js2-mode-hook (lambda() (setq truncate-lines 1)))
   (add-hook 'web-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'less-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'css-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'js-jsx-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'coffee-mode-hook (lambda () (setq truncate-lines 1)))

   (spacemacs/toggle-vi-tilde-fringe-off)
   #+END_SRC
** Window settings
   Transparency for the window.
   #+BEGIN_SRC emacs-lisp
   (set-frame-parameter (selected-frame) 'alpha '(95 . 85))
   #+END_SRC
* Key bindings
** General key bindings
  #+BEGIN_SRC emacs-lisp
	(define-key evil-normal-state-map "L" 'evil-end-of-line)
	(define-key evil-normal-state-map "H" 'evil-beginning-of-line)
	(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
	(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
	(define-key evil-normal-state-map (kbd "<down>") 'flycheck-next-error)
	(define-key evil-normal-state-map (kbd "<up>") 'flycheck-previous-error)
	; (define-key evil-normal-state-map (kbd "<tab>") 'origami-toggle-node)
	(define-key evil-normal-state-map (kbd "<backtab>") 'origami-show-only-node)

	(define-key evil-insert-state-map (kbd "M-;") 'yas-expand)
	(define-key evil-insert-state-map (kbd "C-j") 'evil-scroll-line-down)
	(define-key evil-insert-state-map (kbd "C-k") 'evil-scroll-line-up)
	(define-key evil-insert-state-map (kbd "C-S-j") (lambda () (interactive) (evil-scroll-line-down 5)))
	(define-key evil-insert-state-map (kbd "C-S-k") (lambda () (interactive) (evil-scroll-line-up 5)))
	(define-key evil-insert-state-map (kbd "C-h") 'evil-prev-buffer)
	(define-key evil-insert-state-map (kbd "C-l") 'evil-next-buffer)
	(define-key evil-insert-state-map (kbd "s-j") 'move-text-line-down)
	(define-key evil-insert-state-map (kbd "s-k") 'move-text-line-up)

	(spacemacs/set-leader-keys
	  "da" 'delete-minibuffer-contents
	  "ca" 'custom/copy-buffer-contents)

	(evil-define-key 'normal coffee-mode-map (kbd "<tab>") 'origami-toggle-node)
  #+END_SRC
** Key chord escapes
  #+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-mode t)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (setq-default evil-escape-key-sequence ",.")
  #+END_SRC
** Org file shortcuts
  #+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys
	"feD" 'open-custom-config
	"fei" 'open-ideas-org-file)
  #+END_SRC
* Packages
  Configuration for used packages.
  #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives
                '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  #+END_SRC
** Engine mode
   Package to search in browser.
   #+BEGIN_SRC emacs-lisp
   (require 'engine-mode)
   (engine-mode 1)
   (defengine duckduckgo "https://duckduckgo.com/?q=%s" :keybinding "d")
   (defengine google "https://google.com/search?q=%s" :keybinding "g")
   (defengine wiki "https://en.wikipedia.org/wiki/Search?search=%s" :keybinding "w")
   (engine/set-keymap-prefix (kbd "M-/"))
   #+END_SRC
** eshell
   #+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^ƒ]*ƒ ")

  (defun current-dir-git-branch-string (pwd)
	"Returns git branch name for current directory, or empty string if PWD is not in a git repo"
	(interactive)
	(when (and (eshell-search-path "git")
			   (locate-dominating-file pwd ".git"))
	  (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
		(propertize (concat " ⤳ "
							(if (> (length git-output) 0)
								(substring git-output 0 -1)
							  "(no brancho)")) 'face `(:foreground "green")))))

  (defun pwd-repl-home (pwd)
	(interactive)
	(let* ((home (expand-file-name (getenv "HOME")))
		   (home-len (length home)))
	  (concat
	   (if (and
			(>= (length pwd) home-len)
			(equal home (substring pwd 0 home-len)))
		   (concat "~" (substring pwd home-len))
		 pwd))))

  (setq eshell-prompt-function
		(lambda ()
		  (concat
		   (propertize "\n⟣━ " 'face `(:foreground "#ffcc66"))
		   ((lambda (p-lst)
			  (concat
			   (propertize
				(concat
				 (mapconcat (lambda (elm) elm)
							(butlast p-lst)
							"/")
				 "/") 'face `(:foreground "#f09000"))
			   (propertize
				(concat
				 (mapconcat (lambda (str) str) (last p-lst) "")
				 "/") 'face `(:foreground "#ff9900" :weight bold))))
			(split-string (pwd-repl-home (eshell/pwd)) "/"))
		   (or (current-dir-git-branch-string (eshell/pwd)))
		   "\n"
		   ;; (propertize (eshell/whoami) 'face `(:foreground "#0088ff"))
		   (propertize "ƒ" 'face `(:foreground "#f03300"))
		   (propertize " " 'face 'default))))
   #+END_SRC
** ESlint
   #+BEGIN_SRC emacs-lisp
	 (setq flycheck-eslintrc "~/.eslintrc")
   #+END_SRC
** Eww
   #+BEGIN_SRC emacs-lisp
   (setq shr-inhibit-images t)
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Flyspell auto-correct
   #+BEGIN_SRC emacs-lisp
   (spacemacs/set-leader-keys
   "SC" 'custom/ispell-fix-then-abbrev)

   (setq save-abbrevs t)
   (setq-default abbrev-mode t)
   #+END_SRC
** Ispell dictionary
   #+BEGIN_SRC emacs-lisp
   ;; (setq ispell-personal-dictionary "~/emacs-config/ispell.eng.pws")
   #+END_SRC
** JS2-mode
   #+BEGIN_SRC emacs-lisp
	 (setq js2-mode-show-strict-warnings nil)
	 (setq js2-mode-show-parse-errors nil)
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(markdown-command "github-markdown-render"))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
   (setq-default git-magit-status-fullscreen 1)
   (setq git-magit-status-fullscreen 1)
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
   (setq neo-theme 'icons)
   (global-set-key [f2] 'neotree-find-project-root)
   (setq neo-window-position 'right)
   #+END_SRC
** Org settings
   Basic general org settings.
   #+BEGIN_SRC emacs-lisp
	(setq org-agenda-dim-blocked-tasks nil)
	(setq org-agenda-use-tag-inheritance nil)

	(setq tramp-method "ssh")
	(setq org-tramp-user "carnifex")
	(setq org-remote-host "34.217.132.133")
	(setq org-remote-address (concat "/" tramp-method ":" org-tramp-user "@" org-remote-host ":"))

	(setq org-todo-keywords
		  '((sequence "TODO" "IN-PROGRESS" "BLOCKED" "|" "DONE" "POSTPONED" "CANCELLED")))
	(setq org-enforce-todo-dependencies t)
	(setq org-ellipsis " ▼")
	(setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js")
	(setq org-reverse-note-order t)
	(setq org-refile-use-outline-path t)

	(setq org-projects-file (concat org-remote-address "/home/carnifex/org/projects.org"))
	(setq org-projects-inbox-file (concat org-remote-address "/home/carnifex/org/projects-inbox.org"))
	(setq org-ideas-file (concat org-remote-address "/home/carnifex/org/ideas.org"))

	(if (file-exists-p "~/org/work.org")
		(progn
		  (setq org-work-file "~/org/work.org")
		  (setq org-work-inbox-file "~/org/work-inbox.org"))
	  (progn
		(setq org-work-file nil)
		(setq org-work-inbox-file nil)))

	(defun open-custom-config ()
	  (interactive)
	  (find-file "~/emacs-config/emacs.config.org"))
	(defun open-ideas-org-file ()
	  (interactive)
	  (find-file org-ideas-file))

	(setq org-capture-templates
		  '(("t" "todo" entry (file+headline org-projects-inbox-file "inbox")
			 "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :source:   emacs\n  :END:\n" :prepend t :kill-buffer t)
			("w" "work todo" entry (file+headline org-work-inbox-file "inbox")
			 "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n%^{effort}p" :prepend t :kill-buffer t)
			("l" "linked todo" entry (file+headline org-work-inbox-file "inbox")
			 "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :link: %a\n  :END:\n%^{effort}p" :prepend t :kill-buffer t)
			("i" "idea/someday" entry (file+headline org-ideas-file)
			 "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t)))

	(setq org-refile-targets '((org-projects-file :maxlevel . 1)
							   (org-work-file :maxlevel . 1)))
	(setq org-outline-path-complete-in-steps nil)
	(setq org-feed-save-after-adding t)
	(setq org-agenda-window-setup 'current-window)
	(setq org-bullets-bullet-list '("Φ"))

	(if org-work-file
		(setq org-agenda-files
			  (list org-projects-inbox-file org-projects-file org-work-file org-work-inbox-file))
	    (setq org-agenda-files
			  (list org-projects-inbox-file org-projects-file)))

	(calendar-set-date-style 'iso)
   #+END_SRC

   #+RESULTS:

** Prettify symbols
   Replace keywords with symbols
   #+BEGIN_SRC emacs-lisp

   (defun register-prettify ()
 	  (progn
 		(push '("function" . ?ƒ) prettify-symbols-alist)
 		(push '("this" . ?@) prettify-symbols-alist)
 		(push '("null" . ?∅) prettify-symbols-alist)
 		(push '("undefined" . ?∄) prettify-symbols-alist)
 		(push '("return" . ?⇐) prettify-symbols-alist)
 		(push '("=>" . ?⇒) prettify-symbols-alist)
 		(push '("prototype" . ?Ω) prettify-symbols-alist)))
	 ;; (remove-duplicates prettify-symbols-alist :test 'string=)))
 
   (add-hook 'js2-mode-hook 'register-prettify)
   (add-hook 'coffee-mode-hook 'register-prettify)
   (add-hook 'react-mode-hook 'register-prettify)

   (global-prettify-symbols-mode 1)
   #+END_SRC
** Rainbow mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'css-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'less-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'scss-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'sass-mode-hook (lambda () (rainbow-mode t)))
   #+END_SRC
** Recentf
   #+BEGIN_SRC emacs-lisp
   (setq recentf-max-saved-items 100)
   #+END_SRC
** Spaceline
   #+BEGIN_SRC emacs-lisp
	 (setq powerline-default-separator 'arrow)
	 ;; (spaceline-toggle-mu4e-alert-segment-on)

	 (use-package all-the-icons)
	 (use-package spaceline-all-the-icons
	   :after spaceline
	   :config (spaceline-all-the-icons-theme))
	 (setq spaceline-all-the-icons-separator-type 'arrow)
	 (setq spaceline-all-the-icons-clock-always-visible nil)

	 (spaceline-toggle-all-the-icons-bookmark-on)
	 (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)
	 (spaceline-toggle-all-the-icons-time-off)
	 (spaceline-toggle-all-the-icons-hud-off)
	 (spaceline-toggle-all-the-icons-position-off)
	 (setq spaceline-all-the-icons-icon-set-git-ahead 'commit)
	 (setq spaceline-all-the-icons-icon-set-window-numbering 'solid)
	 (setq spaceline-all-the-icons-slim-render t)
   #+END_SRC
** Tramp
   #+BEGIN_SRC emacs-lisp
   (setq tramp-copy-size-limit nil)
   (setq tramp-verbose 3)
   (setq remote-file-name-inhibit-cache t)

   (add-to-list 'backup-directory-alist
                (cons tramp-file-name-regexp nil))
   #+END_SRC
** Undo tree
   #+BEGIN_SRC emacs-lisp
   ;; (setq undo-tree-history-directory-alist '(("." . "~/emacs-config/.undo")))
   ;; (setq undo-tree-auto-save-history t)
   #+END_SRC
* Functions
** Fix spelling errors
   #+BEGIN_SRC emacs-lisp
   (defun custom/ispell-fix-then-abbrev (p)
	"Fix mispelled word with ispell-word, then create an abbrevation for that."
	(interactive "P")
	(let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
	  (call-interactively 'ispell-word)
	  (setq aft (downcase (or (thing-at-point 'word) "")))
	  (unless (string= aft bef)
		(message "\"%s\" now expands to \"%s\" %sally"
				 bef aft (if p "loc" "glob")
				 (define-abbrev
				   (if p local-abbrev-table global-abbrev-table)
				   bef aft)))))
   #+END_SRC
** Open in new or existing window
   #+BEGIN_SRC emacs-lisp
  (defun custom/open-in-split (file)
   	"get window count, if it's only one, open new window to the right, load file"
 	(interactive)
 	(if (= (length (window-list)) 1)
 	  (progn
 		(split-window-right-and-focus)
 		(find-file file))
 	  (progn 
	    (other-window 1)
        (find-file file))))
   #+END_SRC
** Copy buffer contents
   #+BEGIN_SRC emacs-lisp
   (defun custom/copy-buffer-contents ()
     (interactive)
	 (progn
	   (let ((origin (point)))
         (mark-whole-buffer)
         (kill-ring-save (region-beginning) (region-end))
         (goto-char origin))))
   #+END_SRC
** Delete buffer contents
   For some reason this is not working. Keeping it for future usage/testing.
   #+BEGIN_SRC emacs-lisp
   (defun custom/delete-buffer-contents ()
	 (interactive)
	 (progn
	   (mark-whole-buffer)
	   (delete-region)))
   #+END_SRC
