#+TITLE: emacs config
#+AUTHOR: Carnifex
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* UI setup
 Config for general usage.
** Window settings
   Transparency for the window.
   #+BEGIN_SRC emacs-lisp
   (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
   #+END_SRC
** Whitespaces
   #+BEGIN_SRC emacs-lisp
   (setq whitespace-style '(face tabs tab-mark trailing))
   (setq whitespace-display-mappings
		 '((space-mark 32 [183])
		   (tab-mark 9 [124 9])))
   #+END_SRC
** AutoComplete
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Remove smartparens
   #+BEGIN_SRC emacs-lisp
   (remove-hook 'prog-mode-hook #'smartparens-mode)
   (spacemacs/toggle-smartparens-globally-off)
   #+END_SRC
** Indentation
   Use tabs, force tab-width 4.
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode t)
   (setq-default tab-width 4)
   #+END_SRC
** Visual bookmarks
   #+BEGIN_SRC emacs-lisp
   (require 'bm)
   (define-key evil-normal-state-map (kbd "M-b") 'bm-toggle)
   (define-key evil-normal-state-map (kbd "M-m") 'bm-toggle)
   (define-key evil-normal-state-map (kbd "<left>") 'bm-previous)
   (define-key evil-normal-state-map (kbd "<right>") 'bm-next)
   #+END_SRC
* Key bindings
  #+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-mode t)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-define evil-insert-state-map ",." 'evil-normal-state)

  (define-key evil-normal-state-map "L" 'evil-end-of-line)
  (define-key evil-normal-state-map "H" 'evil-beginning-of-line)
  (define-key evil-normal-state-map (kbd "C-h") 'evil-prev-buffer)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "<down>") 'flycheck-next-error)
  (define-key evil-normal-state-map (kbd "<up>") 'flycheck-previous-error)
  (define-key evil-normal-state-map (kbd "<tab>") 'evil-toggle-fold)

  (defun open-custom-config ()
	(interactive)
	(find-file "~/emacs-config/emacs.config.org"))
  (defun open-scheduled-org-file ()
	(interactive)
	(find-file "~/org/scheduled.org"))
  (defun open-main-org-file ()
	(interactive)
	(find-file "~/org/main.org"))
  (spacemacs/set-leader-keys
	"few" 'open-custom-config
	"fes" 'open-scheduled-org-file
	"feo" 'open-main-org-file)
  #+END_SRC
* Packages
** Engine mode
   Package to search in browser.
   #+BEGIN_SRC emacs-lisp
   (require 'engine-mode)
   (engine-mode 1)
   (defengine google "https://google.com/search?q=%s" :keybinding "g")
   (engine/set-keymap-prefix (kbd "M-/"))
   #+END_SRC
** ESlint
   #+BEGIN_SRC emacs-lisp
	 (setq flycheck-eslintrc "~/.eslintrc")
   #+END_SRC
** JS2-mode
   #+BEGIN_SRC emacs-lisp
	 (setq js2-mode-show-strict-warnings nil)
	 (setq js2-mode-show-parse-errors nil)

	 (add-hook 'js2-mode-hook (lambda() (whitespace-mode 1)))
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(markdown-command "github-markdown-render"))
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
   (setq neo-theme 'ascii)
   (global-set-key [f2] 'neotree-toggle)
   #+END_SRC
** Org settings
   Basic general org settings.
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords
         '((sequence "TODO" "WAITING" "|" "DONE" "CANCELLED")))
   (setq org-enforce-todo-dependencies t)
   (setq org-ellipsis " ▼")
   (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js")

   (setq org-capture-templates
		'(("t" "todo" entry (file+headline "~/org/main.org" "Tasks")
		   "* TODO %?\n  :PROPERTIES:\n  Added: %<%H%M>\n  :END:")
		  ("w" "work todo" entry (file+datetree "~/org/scheduled.org")
		   "* TODO %?\n  :PROPERTIES:\n  :Added: %<%H:%M>\n  :END:\n%^{Effort}p")
		  ("l" "linked work todo" entry (file+datetree "~/org/scheduled.org")
		   "* TODO %?\n  :PROPERTIES:\n  :Added: %<%H:%M>\n  :Link: %a\n  :END:\n%^{Effort}p")))
   #+END_SRC
** Prettify symbols
   Replace keywords with symbols
   #+BEGIN_SRC emacs-lisp
  (add-hook 'js2-mode-hook
			(lambda ()
			  (push '("function" . ?ƒ) prettify-symbols-alist)
			  (push '("this" . ?@) prettify-symbols-alist)
			  (push '("null" . ?∅) prettify-symbols-alist)
			  (push '("undefined" . ?∄) prettify-symbols-alist)
			  (push '("return" . ?⇐) prettify-symbols-alist)
			  (push '("=>" . ?⇒) prettify-symbols-alist)
			  (push '("prototype" . ?Ω) prettify-symbols-alist)))
			  ;; (remove-duplicates prettify-symbols-alist :test string=)))
  (global-prettify-symbols-mode 1)
   #+END_SRC
** Web mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'web-mode-hook (lambda () (company-web-mode -1)))
   (add-hook 'web-mode-hook (lambda () (whitespace-mode t)))
   #+END_SRC
