#+TITLE: Emacs config
#+AUTHOR: Carnifex
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* UI setup
 Config for general usage.
** Indentation
   Use tabs, force tab-width 4.
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode t)
   (setq-default tab-width 4)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
   (setq python-shell-interpreter "python2")
   #+END_SRC
** Visual bookmarks
   #+BEGIN_SRC emacs-lisp
   (require 'bm)
   (define-key evil-normal-state-map (kbd "M-b") 'bm-toggle)
   (define-key evil-normal-state-map (kbd "M-m") 'bm-toggle)
   (define-key evil-normal-state-map (kbd "<left>") 'bm-previous)
   (define-key evil-normal-state-map (kbd "<right>") 'bm-next)
   #+END_SRC
** Whitespaces
   #+BEGIN_SRC emacs-lisp
   (setq whitespace-style '(face tabs tab-mark trailing))
   (setq whitespace-display-mappings
		 '((space-mark 32 [183])
		   (tab-mark 9 [124 9])))

   ;; make sure whitespaces are shown in the following modes
   (add-hook 'js2-mode-hook (lambda() (whitespace-mode t)))
   (add-hook 'web-mode-hook (lambda () (whitespace-mode t)))
   (add-hook 'less-mode-hook (lambda () (whitespace-mode t)))
   (add-hook 'css-mode-hook (lambda () (whitespace-mode t)))
   (add-hook 'js-jsx-mode-hook (lambda () (whitespace-mode t)))

   (add-hook 'js2-mode-hook (lambda() (setq truncate-lines 1)))
   (add-hook 'web-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'less-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'css-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'js-jsx-mode-hook (lambda () (setq truncate-lines 1)))
   (add-hook 'coffee-mode-hook (lambda () (setq truncate-lines 1)))
   #+END_SRC
** Window settings
   Transparency for the window.
   #+BEGIN_SRC emacs-lisp
   (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
   #+END_SRC
** Windows settings
*** Bash shell
	Set git bash as default shell.
	#+BEGIN_SRC emacs-lisp
	  ;; (if (eq system-type 'windows-nt)
	  ;; 	(progn
	  ;; 	  (setq explicit-shell-file-name "c:/Windows/System32/bash.exe")
	  ;; 	  (setq shell-file-name explicit-shell-file-name)
	  ;; 	  (add-to-list 'exec-path "c:/Windows/System32")
	  ;; 	  (print "changed default shell for windows")))
	#+END_SRC
*** ISpell
	#+BEGIN_SRC emacs-lisp
	(if (eq system-type 'windows-nt)
	    (progn
           (add-to-list 'exec-path "c:/Program Files (x86)/Aspell/bin")
		   (setq ispell-dictionary "american")
		   (setq ispell-program-name "aspell")
		   (require 'ispell)))
	#+END_SRC
*** Search tools
	Set silver-searcher as default text-search program.
	#+BEGIN_SRC emacs-lisp
	(if (eq system-type 'windows-nt)
	    (progn
	      (setq helm-ag-base-command "c:\\emacs\\bin\\ag --vimgrep")
		  (print "changed default method for search")))
	#+END_SRC
*** Tramp with putty
	Set plink as default tramp method.
	#+BEGIN_SRC emacs-lisp
	(if (eq system-type 'windows-nt)
	    (progn
	      (setq-default tramp-default-method "plink")
		  (setq ssh-method "/plink")
		  (print "changed default method for tramp"))
		(progn
		  (setq-default tramp-default-method "ssh")
		  (setq ssh-method "/ssh")))
	#+END_SRC
* Key bindings
** General key bindings
  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "L" 'evil-end-of-line)
  (define-key evil-normal-state-map "H" 'evil-beginning-of-line)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-scroll-line-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-scroll-line-up)
  (define-key evil-normal-state-map (kbd "C-S-j") (lambda () (interactive) (evil-scroll-line-down 5)))
  (define-key evil-normal-state-map (kbd "C-S-k") (lambda () (interactive) (evil-scroll-line-up 5)))
  (define-key evil-normal-state-map (kbd "C-h") 'evil-prev-buffer)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "<down>") 'flycheck-next-error)
  (define-key evil-normal-state-map (kbd "<up>") 'flycheck-previous-error)
  ; (define-key evil-normal-state-map (kbd "<tab>") 'origami-toggle-node)
  (define-key evil-normal-state-map (kbd "<backtab>") 'origami-show-only-node)

  (define-key evil-insert-state-map (kbd "M-;") 'yas-expand)
  (define-key evil-insert-state-map (kbd "C-j") 'evil-scroll-line-down)
  (define-key evil-insert-state-map (kbd "C-k") 'evil-scroll-line-up)
  (define-key evil-insert-state-map (kbd "C-S-j") (lambda () (interactive) (evil-scroll-line-down 5)))
  (define-key evil-insert-state-map (kbd "C-S-k") (lambda () (interactive) (evil-scroll-line-up 5)))
  (define-key evil-insert-state-map (kbd "C-h") 'evil-prev-buffer)
  (define-key evil-insert-state-map (kbd "C-l") 'evil-next-buffer)
  (define-key evil-insert-state-map (kbd "s-j") 'move-text-line-down)
  (define-key evil-insert-state-map (kbd "s-k") 'move-text-line-up)
  (define-key evil-normal-state-map (kbd "s-j") 'move-text-line-down)
  (define-key evil-normal-state-map (kbd "s-k") 'move-text-line-up)

  (spacemacs/set-leader-keys
    "ca" 'custom/copy-file-contents)

  (evil-define-key 'normal coffee-mode-map (kbd "<tab>") 'origami-toggle-node)
  #+END_SRC
** Key chord escapes
  #+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-mode t)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (setq-default evil-escape-key-sequence ",.")
  #+END_SRC
** Org file shortcuts
  #+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys
	"feD" 'open-custom-config
	"feg" 'open-inbox-org-file
	"few" 'open-work-org-file
	"fep" 'open-projects-org-file
	"fei" 'open-ideas-org-file)
  #+END_SRC
* Packages
  Configuration for used packages.
  #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives
                '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  #+END_SRC
** Engine mode
   Package to search in browser.
   #+BEGIN_SRC emacs-lisp
   (require 'engine-mode)
   (engine-mode 1)
   (defengine duckduckgo "https://duckduckgo.com/?q=%s" :keybinding "d")
   (defengine google "https://google.com/search?q=%s" :keybinding "g")
   (defengine wiki "https://en.wikipedia.org/wiki/Search?search=%s" :keybinding "w")
   (engine/set-keymap-prefix (kbd "M-/"))
   #+END_SRC
** ESlint
   #+BEGIN_SRC emacs-lisp
	 (setq flycheck-eslintrc "~/.eslintrc")
   #+END_SRC
** Eww
   #+BEGIN_SRC emacs-lisp
   (setq shr-inhibit-images t)
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Flyspell auto-correct
   #+BEGIN_SRC emacs-lisp
   (spacemacs/set-leader-keys
   "SC" 'custom/ispell-fix-then-abbrev)

   (setq save-abbrevs t)
   (setq-default abbrev-mode t)
   #+END_SRC
** Ispell dictionary
   #+BEGIN_SRC emacs-lisp
   ;; (setq ispell-personal-dictionary "~/emacs-config/ispell.eng.pws")
   #+END_SRC
** JS2-mode
   #+BEGIN_SRC emacs-lisp
	 (setq js2-mode-show-strict-warnings nil)
	 (setq js2-mode-show-parse-errors nil)
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(markdown-command "github-markdown-render"))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
   (setq-default git-magit-status-fullscreen 1)
   (setq git-magit-status-fullscreen 1)
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
   (setq neo-theme 'icons)
   (global-set-key [f2] 'neotree-find-project-root)
   (setq neo-window-position 'right)
   #+END_SRC
** Org settings
   Basic general org settings.
   #+BEGIN_SRC emacs-lisp
	 (setq org-todo-keywords
		   '((sequence "TODO" "IN-PROGRESS" "BLOCKED" "|" "DONE" "POSTPONED" "CANCELLED")))
	 (setq org-enforce-todo-dependencies t)
	 (setq org-ellipsis " ▼")
	 (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js")
	 (setq org-reverse-note-order t)
	 (setq org-refile-use-outline-path t)

	 (setq aws-url (concat ssh-method ":carnifex@54.244.68.202:"))
	 (setq org-projects-file (concat aws-url "/home/carnifex/org/projects.org"))
	 (setq org-work-file (concat aws-url "/home/carnifex/org/work.org"))
	 (setq org-inbox-file (concat aws-url "/home/carnifex/org/inbox.org"))
	 (setq org-ideas-file (concat aws-url "/home/carnifex/org/ideas.org"))

	 (defun open-custom-config ()
		 (interactive)
		 (find-file "~/emacs-config/emacs.config.org"))
	 (defun open-work-org-file ()
		 (interactive)
		 (custom/open-in-split org-work-file))
	 (defun open-projects-org-file ()
		 (interactive)
		 (custom/open-in-split org-projects-file))
	 (defun open-ideas-org-file ()
		 (interactive)
		 (custom/open-in-split org-ideas-file))

	 (setq org-capture-templates
		   '(("t" "todo" entry (file+headline org-inbox-file "inbox")
			  "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n%^{effort}p" :prepend t :kill-buffer t)
			 ("l" "linked todo" entry (file+headline org-inbox-file "inbox")
			  "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :Link: %a\n  :END:\n%^{effort}p" :prepend t :kill-buffer t)
			 ("i" "idea/someday" entry (file+headline org-ideas-file)
			  "* TODO %?\n  :PROPERTIES:\n  :added: %T\n  :END:\n" :prepend t :kill-buffer t)))

	 (setq org-refile-targets '((org-projects-file :maxlevel . 1)
								(org-work-file :maxlevel . 1)))
	 (setq org-outline-path-complete-in-steps nil)
	 (setq org-feed-save-after-adding t)

	 (setq org-agenda-files
	   (list org-inbox-file org-work-file org-projects-file))
   #+END_SRC
** Prettify symbols
   Replace keywords with symbols
   #+BEGIN_SRC emacs-lisp

   (defun register-prettify ()
 	  (progn
 		(push '("function" . ?ƒ) prettify-symbols-alist)
 		(push '("this" . ?@) prettify-symbols-alist)
 		(push '("null" . ?∅) prettify-symbols-alist)
 		(push '("undefined" . ?∄) prettify-symbols-alist)
 		(push '("return" . ?⇐) prettify-symbols-alist)
 		(push '("=>" . ?⇒) prettify-symbols-alist)
 		(push '("prototype" . ?Ω) prettify-symbols-alist)))
	 ;; (remove-duplicates prettify-symbols-alist :test 'string=)))
 
   (add-hook 'js2-mode-hook 'register-prettify)
   (add-hook 'coffee-mode-hook 'register-prettify)
   (add-hook 'react-mode-hook 'register-prettify)

   (global-prettify-symbols-mode 1)
   #+END_SRC
** Rainbow mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'css-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'less-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'scss-mode-hook (lambda () (rainbow-mode t)))
   (add-hook 'sass-mode-hook (lambda () (rainbow-mode t)))
   #+END_SRC
** Recentf
   #+BEGIN_SRC emacs-lisp
   (setq recentf-max-saved-items 100)
   #+END_SRC
** Spaceline
   #+BEGIN_SRC emacs-lisp
   (setq powerline-default-separator 'arrow)
   (use-package all-the-icons)
   (use-package spaceline-all-the-icons
     :after spaceline
	 :config (spaceline-all-the-icons-theme))
   (setq spaceline-all-the-icons-separator-type 'arrow)
   (setq spaceline-all-the-icons-clock-always-visible nil)

   (spaceline-toggle-all-the-icons-bookmark-on)
   (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)
   (spaceline-toggle-all-the-icons-time-off)
   (spaceline-toggle-all-the-icons-hud-off)
   (spaceline-toggle-all-the-icons-position-off)
   (setq spaceline-all-the-icons-icon-set-git-ahead 'commit)
   (setq spaceline-all-the-icons-icon-set-window-numbering 'solid)
   (setq spaceline-all-the-icons-slim-render t)
   #+END_SRC
** Undo tree
   #+BEGIN_SRC emacs-lisp
   ;; (setq undo-tree-history-directory-alist '(("." . "~/emacs-config/.undo")))
   ;; (setq undo-tree-auto-save-history t)
   #+END_SRC
* Functions
** Fix spelling errors
   #+BEGIN_SRC emacs-lisp
   (defun custom/ispell-fix-then-abbrev (p)
	"Fix mispelled word with ispell-word, then create an abbrevation for that."
	(interactive "P")
	(let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
	  (call-interactively 'ispell-word)
	  (setq aft (downcase (or (thing-at-point 'word) "")))
	  (unless (string= aft bef)
		(message "\"%s\" now expands to \"%s\" %sally"
				 bef aft (if p "loc" "glob")
				 (define-abbrev
				   (if p local-abbrev-table global-abbrev-table)
				   bef aft)))))
   #+END_SRC
** Open in new or existing window
   #+BEGIN_SRC emacs-lisp
  (defun custom/open-in-split (file)
   	"get window count, if it's only one, open new window to the right, load file"
 	(interactive)
 	(if (= (length (window-list)) 1)
 	  (progn
 		(split-window-right-and-focus)
 		(find-file file))
 	  (progn 
	    (other-window 1)
        (find-file file))))
   #+END_SRC
** Copy file contents
   #+BEGIN_SRC emacs-lisp
   (defun custom/copy-file-contents ()
     (interactive)
	 (progn
	   (let ((origin (point)))
         (mark-whole-buffer)
         (kill-ring-save (region-beginning) (region-end))
         (goto-char origin))))
   #+END_SRC
